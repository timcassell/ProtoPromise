<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;netstandard2.1;net6.0;net8.0</TargetFrameworks>
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <OutDir>bin\$(TargetFramework)\$(Configuration)</OutDir>
    <IsTrimmable>true</IsTrimmable>
    <IsAotCompatible Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net7.0'))">true</IsAotCompatible>
  </PropertyGroup>

  <PropertyGroup>
    <Description>Robust and efficient library for management of asynchronous operations.</Description>
    <PackageTags>promise;promises;task;tasks;unity;coroutine;coroutines;concurrency;concurrent;parallel;asynchronous;async;await;thread;threads;threading;then;thenable;callback;callbacks</PackageTags>
  </PropertyGroup>

  <Choose>
    <!--Unity's IL2CPP runtime had a lot of issues that we had to work around, many of which were fixed when they added .Net Standard 2.1 support (but not all of them).
      If someone chooses to use the Nuget package instead of the Unity package, and builds with IL2CPP, we must make sure everything still works with those workarounds.
      To keep things simple, we just define ENABLE_IL2CPP in all non-core build targets (standard and framework), so all build targets that Unity can possibly consume will have the workarounds baked in.
      (At least until Unity finally adds .Net Core runtime, and hopefully all IL2CPP bugs will be fixed by then.)-->
    <When Condition="'$(TargetFramework)'=='netstandard2.0'">
      <PropertyGroup>
        <LangVersion>7.3</LangVersion>
        <DefineConstants>$(DefineConstants);ENABLE_IL2CPP</DefineConstants>
      </PropertyGroup>
    </When>
    <When Condition="'$(TargetFramework)'=='netstandard2.1'">
      <PropertyGroup>
        <!--For function pointers.-->
        <LangVersion>9</LangVersion>
        <!--We check UNITY_2021_2_OR_NEWER to see if C#9 is supported, since Unity doesn't have a language define constant for it.-->
        <DefineConstants>$(DefineConstants);ENABLE_IL2CPP;UNITY_2021_2_OR_NEWER</DefineConstants>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <!--We can use the latest C# version in net6.0 and later since Unity doesn't even support it yet.-->
        <LangVersion>12</LangVersion>
        <!--We check UNITY_2021_2_OR_NEWER to see if C#9 is supported, since Unity doesn't have a language define constant for it.-->
        <DefineConstants>$(DefineConstants);UNITY_2021_2_OR_NEWER</DefineConstants>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <!--Always reference polyfill packages when publicly exposing types from them.-->
  <ItemGroup>
    <PackageReference Include="System.Threading.Tasks.Extensions" Version="4.6.0" />
    <PackageReference Include="Microsoft.Bcl.TimeProvider" Version="8.0.1" />
  </ItemGroup>

  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
    <PackageReference Include="Microsoft.Bcl.HashCode" Version="6.0.0" />
    <PackageReference Include="System.Memory" Version="4.6.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\ProtoPromise.Analyzer\ProtoPromise.Analyzer.csproj" ReferenceOutputAssembly="false" OutputItemType="Analyzer" />
    <Compile Include="..\..\Package\Core\**\*.cs" />
  </ItemGroup>
  
  <ItemGroup>
    <Content Include="..\ProtoPromise.Analyzer\bin\$(Configuration)\netstandard2.0\ProtoPromise.Analyzer.dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
    <Content Include="bin\**\*" Pack="true" PackagePath="lib" Visible="false" />
    <Content Include="buildTransitive\**\*" Pack="true" PackagePath="buildTransitive" />
  </ItemGroup>

</Project>